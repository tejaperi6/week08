name: Backend Pipeline

on:
  pull_request:
    paths:
      - 'backend/**'
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/backend-pipeline.yml'
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: tejaacr98765.azurecr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: pip install -r backend/product_service/requirements.txt
      - run: pip install -r backend/order_service/requirements.txt
      - run: pip install pytest httpx
      - run: pytest backend/product_service/tests --maxfail=1 --disable-warnings -q
      - run: pytest backend/order_service/tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - run: az acr login --name tejaacr98765
      - run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ./backend/order_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_images
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - run: |
          az aks get-credentials --resource-group rg-teja --name aks-teja --overwrite-existing
          kubectl apply -f k8s/
          kubectl set image deployment/product-service-w08e1 product-service-container=${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          kubectl set image deployment/order-service-w08e1 order-service-container=${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
